#!/bin/bash
# MLOps Platform Dashboard Access
# Provides secure web access to Kubernetes resources

set -e

echo "üéØ Starting MLOps Platform Dashboard Access..."

# Function to start kubectl proxy with proper authentication
start_proxy() {
    echo "üîê Starting authenticated kubectl proxy..."
    
    # Kill any existing proxy
    pkill -f "kubectl proxy" || true
    sleep 2
    
    # Start proxy with authentication
    kubectl proxy --port=8080 --address='127.0.0.1' --accept-hosts='^localhost$,^127\.0\.0\.1$,^\[::1\]$' &
    PROXY_PID=$!
    
    echo "‚úÖ Kubectl proxy started (PID: $PROXY_PID)"
    echo "   üì° Proxy URL: http://localhost:8080"
    
    # Wait for proxy to be ready
    echo "‚è≥ Waiting for proxy to be ready..."
    for i in {1..10}; do
        if curl -s http://localhost:8080/api/v1/namespaces > /dev/null 2>&1; then
            echo "‚úÖ Proxy is ready!"
            break
        fi
        sleep 1
    done
}

# Function to show available endpoints
show_endpoints() {
    echo ""
    echo "üéØ Available MLOps Platform Endpoints:"
    echo "======================================"
    echo ""
    echo "üìä Namespaces:"
    echo "‚Ä¢ Production:  http://localhost:8080/api/v1/namespaces/mlops-production"
    echo "‚Ä¢ Monitoring:  http://localhost:8080/api/v1/namespaces/mlops-monitoring"
    echo "‚Ä¢ Serving:     http://localhost:8080/api/v1/namespaces/mlops-serving"
    echo ""
    echo "üîç Resources:"
    echo "‚Ä¢ All Pods:    http://localhost:8080/api/v1/pods"
    echo "‚Ä¢ Services:    http://localhost:8080/api/v1/services"
    echo "‚Ä¢ Deployments: http://localhost:8080/apis/apps/v1/deployments"
    echo ""
    echo "üìà Metrics (if available):"
    echo "‚Ä¢ Node Metrics: http://localhost:8080/apis/metrics.k8s.io/v1beta1/nodes"
    echo "‚Ä¢ Pod Metrics:  http://localhost:8080/apis/metrics.k8s.io/v1beta1/pods"
    echo ""
    echo "üéØ MLOps Specific:"
    echo "‚Ä¢ Production Pods: http://localhost:8080/api/v1/namespaces/mlops-production/pods"
    echo "‚Ä¢ Monitoring SVC:  http://localhost:8080/api/v1/namespaces/mlops-monitoring/services"
    echo "‚Ä¢ Serving Deploy:  http://localhost:8080/apis/apps/v1/namespaces/mlops-serving/deployments"
}

# Function to test endpoints
test_endpoints() {
    echo ""
    echo "üß™ Testing MLOps Platform Endpoints:"
    echo "===================================="
    
    # Test namespace access
    echo "üìä Testing namespace access..."
    for ns in mlops-production mlops-monitoring mlops-serving; do
        if curl -s "http://localhost:8080/api/v1/namespaces/$ns" | grep -q "Active"; then
            echo "  ‚úÖ $ns: Active"
        else
            echo "  ‚ùå $ns: Not accessible"
        fi
    done
    
    # Test resource access
    echo ""
    echo "üîç Testing resource access..."
    if curl -s "http://localhost:8080/api/v1/pods" | grep -q "PodList"; then
        echo "  ‚úÖ Pods: Accessible"
    else
        echo "  ‚ùå Pods: Not accessible"
    fi
    
    if curl -s "http://localhost:8080/api/v1/services" | grep -q "ServiceList"; then
        echo "  ‚úÖ Services: Accessible"
    else
        echo "  ‚ùå Services: Not accessible"
    fi
}

# Main execution
main() {
    start_proxy
    show_endpoints
    test_endpoints
    
    echo ""
    echo "üéØ MLOps Dashboard Access Ready!"
    echo "==============================="
    echo ""
    echo "‚úÖ You can now access the Kubernetes API through the proxy at:"
    echo "   üåê http://localhost:8080"
    echo ""
    echo "üí° Pro Tips:"
    echo "‚Ä¢ Use the endpoints above to access specific resources"
    echo "‚Ä¢ The proxy handles authentication automatically"
    echo "‚Ä¢ Add '/api/v1' prefix for core resources"
    echo "‚Ä¢ Add '/apis/GROUP/VERSION' for custom resources"
    echo ""
    echo "üî• Example Commands:"
    echo "curl http://localhost:8080/api/v1/namespaces/mlops-production"
    echo "curl http://localhost:8080/api/v1/namespaces/mlops-production/pods"
    echo ""
    echo "üõë To stop the proxy: pkill -f 'kubectl proxy'"
    echo ""
    echo "üìä Proxy is running in background (PID: $PROXY_PID)"
    echo "   Press Ctrl+C to stop this script (proxy will continue running)"
    
    # Keep script running to show logs
    echo ""
    echo "üìã Monitoring proxy logs (Ctrl+C to exit)..."
    tail -f /dev/null
}

# Handle script termination
cleanup() {
    echo ""
    echo "üõë Stopping MLOps Dashboard Access..."
    pkill -f "kubectl proxy" || true
    echo "‚úÖ Cleanup complete"
    exit 0
}

trap cleanup INT TERM

# Run main function
main
