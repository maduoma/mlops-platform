apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: mlops-production
type: Opaque
data:
  # Base64 encoded credentials
  postgres-password: cGFzc3dvcmQ= # "password" - change in production
  mlflow-password: cGFzc3dvcmQ= # "password" - change in production
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: mlops-production
data:
  POSTGRES_DB: "mlflowdb"
  POSTGRES_USER: "postgres"
  MLFLOW_USER: "mlflow"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: mlops-production
  labels:
    app: postgres
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: managed-premium # Azure Premium SSD
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: mlops-production
  labels:
    app: postgres
    version: "15"
    environment: production
spec:
  replicas: 1
  strategy:
    type: Recreate # PostgreSQL requires recreate strategy
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        version: "15"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999
      containers:
        - name: postgres
          image: postgres:15-alpine
          imagePullPolicy: Always
          ports:
            - containerPort: 5432
              name: postgres
              protocol: TCP
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: postgres-password
            - name: MLFLOW_USER
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: MLFLOW_USER
            - name: MLFLOW_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: mlflow-password
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
            - name: init-scripts
              mountPath: /docker-entrypoint-initdb.d
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "2000m"
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
        # PostgreSQL Exporter for monitoring
        - name: postgres-exporter
          image: prometheuscommunity/postgres-exporter:latest
          ports:
            - containerPort: 9187
              name: metrics
          env:
            - name: DATA_SOURCE_NAME
              value: "postgresql://postgres:password@localhost:5432/mlflowdb?sslmode=disable"
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
        - name: init-scripts
          configMap:
            name: postgres-init-scripts
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: mlops-production
data:
  01-init-mlflow-user.sql: |
    -- Create MLflow user and database
    CREATE USER mlflow WITH PASSWORD 'password';
    GRANT ALL PRIVILEGES ON DATABASE mlflowdb TO mlflow;

    -- Grant schema permissions
    \c mlflowdb
    GRANT ALL ON SCHEMA public TO mlflow;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO mlflow;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO mlflow;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO mlflow;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO mlflow;
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: mlops-production
  labels:
    app: postgres
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgres
    - port: 9187
      targetPort: 9187
      protocol: TCP
      name: metrics
  selector:
    app: postgres
